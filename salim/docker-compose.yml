services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: salim_db
    ports:
      - "5440:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  localstack:
    image: localstack/localstack:latest
    container_name: s3-simulator
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3 
      - DEBUG=1
      - LAMBDA_EXECUTOR=local
      - DEFAULT_REGION=us-east-1
    volumes:
      - localstack-data:/var/lib/localstack

  selenium:
    image: seleniarm/standalone-chromium:latest
    shm_size: 2g
    ports:
      - "4444:4444"


  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672" 
      - "15672:15672" 
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 20s
      timeout: 10s
      retries: 5

  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/salim_db

      - S3_ENDPOINT=http://localstack:4566
      - S3_ACCESS_KEY=test
      - S3_SECRET_KEY=test
      - S3_REGION=us-east-1
      - S3_BUCKET=test-bucket
      - S3_FORCE_PATH_STYLE=true

      - VERIFY_SSL=false
      - SELENIUM_REMOTE_URL=http://selenium:4444/wd/hub
    depends_on:
      db:
        condition: service_healthy
      localstack:
        condition: service_started
      selenium:
        condition: service_started
    volumes:
      - .:/app
    command: >
      python -m uvicorn app.main:app --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  lambda:
    build: .
    container_name: lambda
    command: ["python", "-u", "handler.py"]
    volumes:
      - .:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      localstack:
        condition: service_started
      mongo:
        condition: service_started

    environment:

      - S3_ENDPOINT=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - S3_BUCKET=test-bucket
      - PYTHONUNBUFFERED=1

      - QUEUE_BACKEND=rabbit
      - RABBIT_URL=amqp://guest:guest@rabbitmq:5672/%2f
      - RABBIT_QUEUE=results-queue

      - STATE_BACKEND=mongo
      - MONGO_URI=mongodb://mongo:27017
      - MONGO_DB=prices
      - MONGO_COL=last_run

    ports:
      - "8080:8080"


  mongo:
    image: mongo:6
    ports:
      - "27017:27017"


  save-to-sql:
    build: .
    container_name: save-to-sql
    command: ["python", "-m", "extractProcess.saveToSqlProcess.worker"]
    volumes:
      - .:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy   # לשלב הבא (UPSERT); כרגע לא מזיק
    environment:
      - RABBIT_URL=amqp://guest:guest@rabbitmq:5672/%2f
      - INPUT_QUEUE=results-queue
      - PYTHONPATH=/app
      - DLQ_QUEUE=results.dlq
      - PREFETCH=50          # כמות הודעות במקביל (QoS)
      - BATCH_SIZE=50        # אם תרצי לעבד במנות (לא חובה)
      # חיבורי DB לשלב הבא:
      - POSTGRES_HOST=db
      - POSTGRES_DB=salim_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    restart: unless-stopped


volumes:
  postgres_data:
  localstack-data:
